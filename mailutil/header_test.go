package mailutil

import (
	"bytes"
	"net/mail"
	"strings"
	"testing"
)

// https://tools.ietf.org/html/rfc5322#section-2.2.3 "the field body portion of a header field can be split into a multiple-line representation" (field body only!)

func TestFold(t *testing.T) {

	tests := []struct {
		name     string
		body     string
		expected string
	}{
		// real-world example
		{"List-Id", `"test" <test@example.com>`, `List-Id: "test" <test@example.com>` + "\r\n"},
		// many spaces
		{"Some-Header", "Foo bar baz", "Some-Header: Foo bar baz\r\n"},
		// collapse spaces, no empty lines in output
		{"Some-Header", "012345678901234567890123456789                    01234567890123456789012345678901234", "Some-Header: 012345678901234567890123456789\r\n 01234567890123456789012345678901234\r\n"},
		{"Some-Header", "012345678901234567890123456789                                                                                                    01234567890123456789012345678901234", "Some-Header: 012345678901234567890123456789\r\n 01234567890123456789012345678901234\r\n"},
		// don't fold directly after header name, even if it's longer than 80 chars
		{"Some-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Long-Header", "0", "Some-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Long-Header: 0\r\n"},
		{"Some-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Long-Header", "  0", "Some-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Long-Header: 0\r\n"},
		{"Some-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Long-Header", "  01234567890123456789012345678901234567890123456789012345678901234 5678", "Some-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Very-Long-Header: 01234567890123456789012345678901234567890123456789012345678901234\r\n 5678\r\n"},
		// no folding
		{"Some-Header", "01234567890123456789012345678901234567890123456789012345678901234", "Some-Header: 01234567890123456789012345678901234567890123456789012345678901234\r\n"},
		// folding at whitespace
		{"Some-Header", "01234567890123456789012345678901234567890123456789012345678901234 5", "Some-Header: 01234567890123456789012345678901234567890123456789012345678901234\r\n 5\r\n"},
		{"Some-Header", "0123456789012345678901234567890123456789012345678901234567890123 45", "Some-Header: 0123456789012345678901234567890123456789012345678901234567890123\r\n 45\r\n"},
		{"Some-Header", "012345678901234567890123456789012345678901234567890123456789012 345", "Some-Header: 012345678901234567890123456789012345678901234567890123456789012\r\n 345\r\n"},
		{"Some-Header", "012 345678901234567890123456789012345678901234567890123456789012345", "Some-Header: 012\r\n 345678901234567890123456789012345678901234567890123456789012345\r\n"},
		{"Some-Header", "01 2345678901234567890123456789012345678901234567890123456789012345", "Some-Header: 01\r\n 2345678901234567890123456789012345678901234567890123456789012345\r\n"},
		{"Some-Header", "0 12345678901234567890123456789012345678901234567890123456789012345", "Some-Header: 0\r\n 12345678901234567890123456789012345678901234567890123456789012345\r\n"},
		// folding at whitespace > 78
		{"Some-Header", "01234567890123456789012345678901234567890123456789012345678901234567\t8", "Some-Header: 01234567890123456789012345678901234567890123456789012345678901234567\r\n 8\r\n"},
		{"Some-Header", "0123456789012345678901234567890123456789012345678901234567890123456\t78", "Some-Header: 0123456789012345678901234567890123456789012345678901234567890123456\r\n 78\r\n"},
		{"Some-Header", "012345678901234567890123456789012345678901234567890123456789012345\t678", "Some-Header: 012345678901234567890123456789012345678901234567890123456789012345\r\n 678\r\n"},
		{"Some-Header", "01234567890123456789012345678901234567890123456789012345678901234\t5678", "Some-Header: 01234567890123456789012345678901234567890123456789012345678901234\r\n 5678\r\n"},
		// folding at multiple whitespaces, and not directly after the header field name
		{"Some-Header", "0123456789012345678901234567890123456789012345678901234567890123456789 0123456789 0123456789012345678901234567890123456789012345678901234567890123456789", "Some-Header: 0123456789012345678901234567890123456789012345678901234567890123456789\r\n 0123456789\r\n 0123456789012345678901234567890123456789012345678901234567890123456789\r\n"},
		// ...even when there are spaces around the input
		{"Some-Header", "   0123456789012345678901234567890123456789012345678901234567890123456789 0123456789 0123456789012345678901234567890123456789012345678901234567890123456789   ", "Some-Header: 0123456789012345678901234567890123456789012345678901234567890123456789\r\n 0123456789\r\n 0123456789012345678901234567890123456789012345678901234567890123456789\r\n"},
		// hard crops
		{"Some-Header", "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345", "Some-Header: 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234\r\n 5\r\n"},
		{"Some-Headerome-Header: 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234\r\n 5678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\r\n"},
		{"Some-Headerome-Header: 0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234\r\n 5678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901\r\n 23456789\r\n"},
	}

	for _, test := range tests {

		writer := &strings.Builder{}
		err := headerWritelnFold(writer, test.name, test.body)
		got := writer.String()

		if got != test.expected || err != nil {
			t.Errorf("got %s %v, want %s", got, err, test.expected)
		}

		for _, line := range strings.Split(got, "\r\n") {
			if len(line) > 998 {
				t.Errorf("got line with length %d", len(line))
			}
		}
	}
}

func TestParseAddressesFromHeader(t *testing.T) {

	tests := []struct {
		header        mail.Header
		expectedAddrs []Addr
		expectedErrs  []string
	}{
		{
			mail.Header{
				"From":    []string{`"Bert" <bert@example.net>`},
				"Subject": []string{"Hello"},
				"To":      []string{`"Ally" <alice@example.com>, claire@example.org`},
			},
			[]Addr{Addr{"Ally", "alice", "example.com"}, Addr{"", "claire", "example.org"}},
			[]string{},
		},
		{
			mail.Header{
				"From":    []string{`"Bert" <bert@example.net>`},
				"Subject": []string{"Hello"},
				"To":      []string{`"Ally" <alice@example.com>, claire@example.org, <dan@missing-tld`},
			},
			[]Addr{Addr{"Ally", "alice", "example.com"}, Addr{"", "claire", "example.org"}},
			[]string{`error parsing line "<dan@missing-tld": mail: unclosed angle-addr`},
		},
	}

	for _, test := range tests {
		result, _ := ParseAddressesFromHeader(test.header, "To", 100)
		for i, r := range result {
			if *r != test.expectedAddrs[i] {
				t.Errorf("got %v, want %s", r, test.expectedAddrs[i])
			}
		}
		/*for i, e := range errs {
			if e.Error() != test.expectedErrs[i] {
				t.Errorf("got %v, want %s", e, test.expectedErrs[i])
			}
		}*/
	}
}

func TestWriteHeader(t *testing.T) {

	h := mail.Header{
		"From":             []string{`"Bert" <bert@example.net>`},
		"Mime-Version":     []string{"1.0"},
		"Received":         []string{"from example.net by example.com with ESMTP", "from foo by bar with ESMTPA id baz", "from foo by bar with ESMTPSA id baz", "from foo with LMTPA", "by bar with LMTPSA id baz"},
		"Subject":          []string{"Hello"},
		"To":               []string{`"Ally" <alice@example.com>, claire@example.org`},
		"User-Agent":       []string{"foo"},
		"X-Originating-IP": []string{"198.51.100.1"},
	}

	got := &bytes.Buffer{}
	WriteHeader(got, h)

	expect := `Received: from example.net by example.com with ESMTP
From: "Bert" <bert@example.net>
MIME-Version: 1.0
Subject: Hello
To: "Ally" <alice@example.com>, claire@example.org

`
	expect = strings.ReplaceAll(expect, "\n", "\r\n") // this file has LF, mail header (RFC 5322 2.2) has CRLF line breaks

	if got.String() != expect {
		t.Errorf("got %s, want %s", got.String(), expect)
	}
}
